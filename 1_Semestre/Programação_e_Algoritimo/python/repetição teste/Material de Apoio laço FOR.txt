# Estrutura de Repetição FOR (PARA)

# Laços de repetição (também chamados de loops) são estruturas de repetição que geralmente são utilizadas para processar uma determinada coleção de dados com um mesmo bloco de código.
# Essas coleções de dados podem ser entrada de dados pelo usuário, linhas de um arquivo de texto ou uma busca de clientes que você buscou em um banco de dados.

# O laço de repetição FOR

# O laço de repetição for é a estrutura de repetição mais utilizada na linguagem Python.

# Além de aceitar sequências estáticas, o for também aceita sequências geradas por iteradores.

# Iteradores são estruturas que permitem iterações, ou seja, lhe permite acesso aos itens de uma determinada coleção de elementos de forma sequencial.

# Quando um laço for é executado, a referência aponta para um determinado elemento da sequência. Esta referência é sempre atualizada a cada nova iteração, de forma que o bloco de código do laço processe o elemento correspondente.

# Veja como é simples a sintaxe de um laço de repetição for

# for {referência} in {sequência} :
#   {código do bloco}

# iteração de cada elemento da string nome

# nome = "Alex Sandro"
# for letra in nome:
#   print(letra)

# A função range()

# A função range() retorna uma série numérica no intervalo enviado como argumento. A série retornada é um objeto iterável tipo range e os elementos contidos serão gerados sob demanda.

# É comum o uso da função range() com a estrutura for loop. Desta forma temos que a cada ciclo o próximo elemento da sequência será utilizado de tal forma que é possível partirmos de um ponto e ir incrementando, decrementando x unidades.

# Parâmetros da range()
# A função range() permite-nos especificar o início da sequência, o passo, e o valor final. O único parâmetro obrigatório é o que define quem será o último elemento da sequência.

# start - início da sequência
# stop - último elemento da sequência
# step - intervalo entre os elementos

# Tipos de implementação da função range
#  - range(stop)
#  - range(start,stop)
#  - range(start,stop, step)

# Na definição da função range() é utilizado a notação de conjuntos numéricos para documentar se o intervalo da sequência é aberto ou fechado. Então, os colchetes junto aos parâmetros indica se o intervalo é aberto ou fechado, isto é, se o número estará contido ou não na sequência numérica.

# range( [start], stop[, step )

# Veja agora os exemplos prático onde vamos imprimir os número de 0 a 9:
#     - STOP
# for numero in range(10):
#     print(numero)

#     - START e STOP
# for numero in range(0,10):
#     print(numero)

#     - START, STOP e STEP
# for numero in range(0,10,1):
#     print(numero)

# Impressão dos valores de 1 até 10.
# for x in range(1, 11, 1):
#     print(x)

# Impressão dos valores de 10 até 1.
# for x in range(10, 0, -1):
#     print(x)

# Podemos utilizar a cláusula break para interromper o laço em um determinado momento e a cláusula continue para pular a execução atual e ir para a próxima execução.

# Veja:
# for {referência} in {sequência} :
#   {código do bloco}
#   continue
#   break

# nome = "Alex Sandro"
# for letra in nome:
#     print(letra)
#     continue
#     print('Ola')

# nome = "Alex Sandro"
# for letra in nome:
#     print(letra)
#     if letra == " ":
#         break
#         print('Ola')
# Também podemos utilizar a estrutura else para executar um determinado código ao final do laço a não ser que este tenha sido interrompido por um break.

# for {referência} in {sequência} :
#   {código do bloco}
#   continue
#   break
# else
#   {bloco de código}

# nome = "Alex Sandro"
# for letra in nome:
#     print(letra)
# else:
#     print("finalizou o for e entrou no else")